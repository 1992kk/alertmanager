// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nflog.proto

/*
	Package nflogpb is a generated protocol buffer package.

	It is generated from these files:
		nflog.proto

	It has these top-level messages:
		Receiver
		Entry
		MeshEntry
*/
package nflogpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import _ "github.com/gogo/protobuf/gogoproto"

import time "time"

import types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Entry_Format int32

const (
	Entry_STANDARD   Entry_Format = 0
	Entry_COMPRESSED Entry_Format = 1
)

var Entry_Format_name = map[int32]string{
	0: "STANDARD",
	1: "COMPRESSED",
}
var Entry_Format_value = map[string]int32{
	"STANDARD":   0,
	"COMPRESSED": 1,
}

func (x Entry_Format) String() string {
	return proto.EnumName(Entry_Format_name, int32(x))
}
func (Entry_Format) EnumDescriptor() ([]byte, []int) { return fileDescriptorNflog, []int{1, 0} }

type Receiver struct {
	// Configured name of the receiver group.
	GroupName string `protobuf:"bytes,1,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// Name of the integration of the receiver.
	Integration string `protobuf:"bytes,2,opt,name=integration,proto3" json:"integration,omitempty"`
	// Index of the receiver with respect to the integration.
	// Every integration in a group may have 0..N configurations.
	Idx uint32 `protobuf:"varint,3,opt,name=idx,proto3" json:"idx,omitempty"`
}

func (m *Receiver) Reset()                    { *m = Receiver{} }
func (m *Receiver) String() string            { return proto.CompactTextString(m) }
func (*Receiver) ProtoMessage()               {}
func (*Receiver) Descriptor() ([]byte, []int) { return fileDescriptorNflog, []int{0} }

// Entry holds information about a successful notification
// sent to a receiver.
type Entry struct {
	// The key identifying the dispatching group.
	GroupKey []byte `protobuf:"bytes,1,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	// The receiver that was notified.
	Receiver *Receiver `protobuf:"bytes,2,opt,name=receiver" json:"receiver,omitempty"`
	// Hash over the state of the group at notification time.
	// Deprecated in favor of FiringAlerts field, but kept for compatibility.
	GroupHash []byte `protobuf:"bytes,3,opt,name=group_hash,json=groupHash,proto3" json:"group_hash,omitempty"`
	// Whether the notification was about a resolved alert.
	// Deprecated in favor of ResolvedAlerts field, but kept for compatibility.
	Resolved bool `protobuf:"varint,4,opt,name=resolved,proto3" json:"resolved,omitempty"`
	// Timestamp of the succeeding notification.
	Timestamp time.Time `protobuf:"bytes,5,opt,name=timestamp,stdtime" json:"timestamp"`
	// FiringAlerts list of hashes of firing alerts at the last notification time.
	FiringAlerts []uint64 `protobuf:"varint,6,rep,packed,name=firing_alerts,json=firingAlerts" json:"firing_alerts,omitempty"`
	// ResolvedAlerts list of hashes of resolved alerts at the last notification time.
	ResolvedAlerts []uint64 `protobuf:"varint,7,rep,packed,name=resolved_alerts,json=resolvedAlerts" json:"resolved_alerts,omitempty"`
	// In the event a message exceeds the gossip size, its resolved and firing
	// alerts are hashed into single values. This result is then compared on the
	// receiving end as a best-effort "are there any changes".
	Format Entry_Format `protobuf:"varint,8,opt,name=format,proto3,enum=nflogpb.Entry_Format" json:"format,omitempty"`
}

func (m *Entry) Reset()                    { *m = Entry{} }
func (m *Entry) String() string            { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()               {}
func (*Entry) Descriptor() ([]byte, []int) { return fileDescriptorNflog, []int{1} }

// MeshEntry is a wrapper message to communicate a notify log
// entry through a mesh network.
type MeshEntry struct {
	// The original raw notify log entry.
	Entry *Entry `protobuf:"bytes,1,opt,name=entry" json:"entry,omitempty"`
	// A timestamp indicating when the mesh peer should evict
	// the log entry from its state.
	ExpiresAt time.Time `protobuf:"bytes,2,opt,name=expires_at,json=expiresAt,stdtime" json:"expires_at"`
}

func (m *MeshEntry) Reset()                    { *m = MeshEntry{} }
func (m *MeshEntry) String() string            { return proto.CompactTextString(m) }
func (*MeshEntry) ProtoMessage()               {}
func (*MeshEntry) Descriptor() ([]byte, []int) { return fileDescriptorNflog, []int{2} }

func init() {
	proto.RegisterType((*Receiver)(nil), "nflogpb.Receiver")
	proto.RegisterType((*Entry)(nil), "nflogpb.Entry")
	proto.RegisterType((*MeshEntry)(nil), "nflogpb.MeshEntry")
	proto.RegisterEnum("nflogpb.Entry_Format", Entry_Format_name, Entry_Format_value)
}
func (m *Receiver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Receiver) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GroupName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNflog(dAtA, i, uint64(len(m.GroupName)))
		i += copy(dAtA[i:], m.GroupName)
	}
	if len(m.Integration) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNflog(dAtA, i, uint64(len(m.Integration)))
		i += copy(dAtA[i:], m.Integration)
	}
	if m.Idx != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNflog(dAtA, i, uint64(m.Idx))
	}
	return i, nil
}

func (m *Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GroupKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNflog(dAtA, i, uint64(len(m.GroupKey)))
		i += copy(dAtA[i:], m.GroupKey)
	}
	if m.Receiver != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNflog(dAtA, i, uint64(m.Receiver.Size()))
		n1, err := m.Receiver.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.GroupHash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNflog(dAtA, i, uint64(len(m.GroupHash)))
		i += copy(dAtA[i:], m.GroupHash)
	}
	if m.Resolved {
		dAtA[i] = 0x20
		i++
		if m.Resolved {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintNflog(dAtA, i, uint64(types.SizeOfStdTime(m.Timestamp)))
	n2, err := types.StdTimeMarshalTo(m.Timestamp, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.FiringAlerts) > 0 {
		dAtA4 := make([]byte, len(m.FiringAlerts)*10)
		var j3 int
		for _, num := range m.FiringAlerts {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintNflog(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if len(m.ResolvedAlerts) > 0 {
		dAtA6 := make([]byte, len(m.ResolvedAlerts)*10)
		var j5 int
		for _, num := range m.ResolvedAlerts {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintNflog(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if m.Format != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintNflog(dAtA, i, uint64(m.Format))
	}
	return i, nil
}

func (m *MeshEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeshEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Entry != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNflog(dAtA, i, uint64(m.Entry.Size()))
		n7, err := m.Entry.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintNflog(dAtA, i, uint64(types.SizeOfStdTime(m.ExpiresAt)))
	n8, err := types.StdTimeMarshalTo(m.ExpiresAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	return i, nil
}

func encodeVarintNflog(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Receiver) Size() (n int) {
	var l int
	_ = l
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovNflog(uint64(l))
	}
	l = len(m.Integration)
	if l > 0 {
		n += 1 + l + sovNflog(uint64(l))
	}
	if m.Idx != 0 {
		n += 1 + sovNflog(uint64(m.Idx))
	}
	return n
}

func (m *Entry) Size() (n int) {
	var l int
	_ = l
	l = len(m.GroupKey)
	if l > 0 {
		n += 1 + l + sovNflog(uint64(l))
	}
	if m.Receiver != nil {
		l = m.Receiver.Size()
		n += 1 + l + sovNflog(uint64(l))
	}
	l = len(m.GroupHash)
	if l > 0 {
		n += 1 + l + sovNflog(uint64(l))
	}
	if m.Resolved {
		n += 2
	}
	l = types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovNflog(uint64(l))
	if len(m.FiringAlerts) > 0 {
		l = 0
		for _, e := range m.FiringAlerts {
			l += sovNflog(uint64(e))
		}
		n += 1 + sovNflog(uint64(l)) + l
	}
	if len(m.ResolvedAlerts) > 0 {
		l = 0
		for _, e := range m.ResolvedAlerts {
			l += sovNflog(uint64(e))
		}
		n += 1 + sovNflog(uint64(l)) + l
	}
	if m.Format != 0 {
		n += 1 + sovNflog(uint64(m.Format))
	}
	return n
}

func (m *MeshEntry) Size() (n int) {
	var l int
	_ = l
	if m.Entry != nil {
		l = m.Entry.Size()
		n += 1 + l + sovNflog(uint64(l))
	}
	l = types.SizeOfStdTime(m.ExpiresAt)
	n += 1 + l + sovNflog(uint64(l))
	return n
}

func sovNflog(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNflog(x uint64) (n int) {
	return sovNflog(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Receiver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNflog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Receiver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Receiver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNflog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNflog
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Integration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNflog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNflog
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Integration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idx", wireType)
			}
			m.Idx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNflog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Idx |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNflog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNflog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNflog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNflog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNflog
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupKey = append(m.GroupKey[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupKey == nil {
				m.GroupKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNflog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNflog
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Receiver == nil {
				m.Receiver = &Receiver{}
			}
			if err := m.Receiver.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNflog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNflog
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupHash = append(m.GroupHash[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupHash == nil {
				m.GroupHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resolved", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNflog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Resolved = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNflog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNflog
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNflog
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FiringAlerts = append(m.FiringAlerts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNflog
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNflog
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNflog
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FiringAlerts = append(m.FiringAlerts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FiringAlerts", wireType)
			}
		case 7:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNflog
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ResolvedAlerts = append(m.ResolvedAlerts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNflog
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNflog
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNflog
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ResolvedAlerts = append(m.ResolvedAlerts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolvedAlerts", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			m.Format = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNflog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Format |= (Entry_Format(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNflog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNflog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeshEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNflog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeshEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeshEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNflog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNflog
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entry == nil {
				m.Entry = &Entry{}
			}
			if err := m.Entry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNflog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNflog
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.ExpiresAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNflog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNflog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNflog(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNflog
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNflog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNflog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNflog
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNflog
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNflog(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNflog = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNflog   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("nflog.proto", fileDescriptorNflog) }

var fileDescriptorNflog = []byte{
	// 437 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xdd, 0x8e, 0xd2, 0x40,
	0x14, 0xc7, 0x99, 0x65, 0x61, 0xcb, 0x81, 0x45, 0x9c, 0x68, 0xd2, 0x60, 0x84, 0x06, 0x8d, 0xf6,
	0x66, 0x4b, 0x82, 0x4f, 0x00, 0x0b, 0xc6, 0xc4, 0xec, 0x6a, 0x86, 0xbd, 0x35, 0x64, 0x70, 0x0f,
	0xa5, 0x91, 0x76, 0x9a, 0xe9, 0x2c, 0x59, 0xde, 0xc2, 0xc7, 0xe2, 0xd2, 0x27, 0xf0, 0x83, 0x97,
	0xf0, 0xd6, 0x70, 0xa6, 0xed, 0xea, 0x9d, 0x77, 0x67, 0x7e, 0xe7, 0x7f, 0xbe, 0xfe, 0x03, 0xcd,
	0x64, 0xb5, 0x51, 0x61, 0x90, 0x6a, 0x65, 0x14, 0x3f, 0xa3, 0x47, 0xba, 0xec, 0xf6, 0x43, 0xa5,
	0xc2, 0x0d, 0x0e, 0x09, 0x2f, 0xef, 0x56, 0x43, 0x13, 0xc5, 0x98, 0x19, 0x19, 0xa7, 0x56, 0xd9,
	0x7d, 0x12, 0xaa, 0x50, 0x51, 0x38, 0x3c, 0x46, 0x96, 0x0e, 0x3e, 0x81, 0x23, 0xf0, 0x33, 0x46,
	0x5b, 0xd4, 0xfc, 0x39, 0x40, 0xa8, 0xd5, 0x5d, 0xba, 0x48, 0x64, 0x8c, 0x2e, 0xf3, 0x98, 0xdf,
	0x10, 0x0d, 0x22, 0xd7, 0x32, 0x46, 0xee, 0x41, 0x33, 0x4a, 0x0c, 0x86, 0x5a, 0x9a, 0x48, 0x25,
	0xee, 0x09, 0xe5, 0xff, 0x46, 0xbc, 0x03, 0xd5, 0xe8, 0xf6, 0xde, 0xad, 0x7a, 0xcc, 0x3f, 0x17,
	0xc7, 0x70, 0xf0, 0xfb, 0x04, 0x6a, 0xb3, 0xc4, 0xe8, 0x1d, 0x7f, 0x06, 0xb6, 0xd5, 0xe2, 0x0b,
	0xee, 0xa8, 0x77, 0x4b, 0x38, 0x04, 0xde, 0xe3, 0x8e, 0x5f, 0x80, 0xa3, 0xf3, 0x2d, 0xa8, 0x6f,
	0x73, 0xf4, 0x38, 0xc8, 0x0f, 0x0b, 0x8a, 0xf5, 0x44, 0x29, 0x79, 0x58, 0x74, 0x2d, 0xb3, 0x35,
	0x8d, 0x6b, 0xe5, 0x8b, 0xbe, 0x93, 0xd9, 0x9a, 0x77, 0x8f, 0xdd, 0x32, 0xb5, 0xd9, 0xe2, 0xad,
	0x7b, 0xea, 0x31, 0xdf, 0x11, 0xe5, 0x9b, 0x4f, 0xa0, 0x51, 0x1a, 0xe3, 0xd6, 0x68, 0x54, 0x37,
	0xb0, 0xd6, 0x05, 0x85, 0x75, 0xc1, 0x4d, 0xa1, 0x98, 0x38, 0xfb, 0xef, 0xfd, 0xca, 0xd7, 0x1f,
	0x7d, 0x26, 0x1e, 0xca, 0xf8, 0x0b, 0x38, 0x5f, 0x45, 0x3a, 0x4a, 0xc2, 0x85, 0xdc, 0xa0, 0x36,
	0x99, 0x5b, 0xf7, 0xaa, 0xfe, 0xa9, 0x68, 0x59, 0x38, 0x26, 0xc6, 0x5f, 0xc3, 0xa3, 0x62, 0x68,
	0x21, 0x3b, 0x23, 0x59, 0xbb, 0xc0, 0xb9, 0xf0, 0x02, 0xea, 0x2b, 0xa5, 0x63, 0x69, 0x5c, 0xc7,
	0x63, 0x7e, 0x7b, 0xf4, 0xb4, 0xbc, 0x9c, 0x8c, 0x0b, 0xde, 0x52, 0x52, 0xe4, 0xa2, 0xc1, 0x2b,
	0xa8, 0x5b, 0xc2, 0x5b, 0xe0, 0xcc, 0x6f, 0xc6, 0xd7, 0xd3, 0xb1, 0x98, 0x76, 0x2a, 0xbc, 0x0d,
	0x70, 0xf9, 0xe1, 0xea, 0xa3, 0x98, 0xcd, 0xe7, 0xb3, 0x69, 0x87, 0x0d, 0xb6, 0xd0, 0xb8, 0xc2,
	0x6c, 0x6d, 0xcd, 0x7f, 0x09, 0x35, 0x3c, 0x06, 0x64, 0x7c, 0x73, 0xd4, 0xfe, 0x77, 0x84, 0xb0,
	0x49, 0x7e, 0x09, 0x80, 0xf7, 0x69, 0xa4, 0x31, 0x5b, 0x48, 0x93, 0xff, 0xc3, 0x7f, 0x9a, 0x93,
	0xd7, 0x8d, 0xcd, 0xa4, 0xb3, 0xff, 0xd5, 0xab, 0xec, 0x0f, 0x3d, 0xf6, 0xed, 0xd0, 0x63, 0x3f,
	0x0f, 0x3d, 0xb6, 0xac, 0x53, 0xe9, 0x9b, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x85, 0x17, 0x93,
	0x2f, 0xb8, 0x02, 0x00, 0x00,
}
